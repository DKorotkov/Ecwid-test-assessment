export class Egallary{constructor(e){this.className=e,this.gallery=document.querySelector(`.${e}`),this.init()}init(){this.gallery?(this.loadDepend(),this.gallery.addEventListener("click",(e=>this.clickOnGallery(e))),this.gallery.addEventListener("dragover",(e=>{this.startDrag(e)})),this.gallery.addEventListener("dragenter",(e=>{this.startDrag(e)})),this.gallery.addEventListener("drop",(e=>{e.stopPropagation(),e.preventDefault(),this.loadByDrop(e),this.stopDrag()})),this.gallery.addEventListener("dragleave",(()=>{this.stopDrag()}))):console.error(`Class ${this.className} not found on page`)}loadDepend(){const e=document.getElementsByTagName("head")[0],t=this.retrieveURL("gallery.min");if(!t)return void console.error("gallery.min.js not find");const s=document.createElement("link");s.rel="stylesheet",s.type="text/css",s.href=t+"/css/gallery.min.css",e.appendChild(s);const a=new XMLHttpRequest,r=this.gallery;a.open("GET",t+"/html/template.html",!0),a.onreadystatechange=function(){4===this.readyState&&200===this.status&&(r.innerHTML=this.responseText)},a.send()}startDrag(e){e.stopPropagation(),e.preventDefault(),this.gallery.classList.add(`${this.className}--drag-start`)}stopDrag(){this.gallery.classList.remove(`${this.className}--drag-start`)}loadByDrop(e){[...e.dataTransfer.files].forEach((e=>{const t=new FileReader;t.onload=e=>{this.addImage(e.target.result)},t.readAsDataURL(e)}))}clickOnGallery(e){const t=e.target,s=this.gallery.querySelector(`.${this.className}__input-load`),a=this.gallery.querySelector(`.${this.className}__input-file`);if(t.classList.contains(`${this.className}__button-load`)&&(a&&a.addEventListener("change",(e=>{const t=e.target.files[0];if(!t)return;let s=new FileReader;s.readAsText(t),s.onerror=function(){console.error(s.error)},s.onload=()=>{try{JSON.parse(s.result).galleryImages.forEach((e=>{this.addImage(e.url,e.width,e.height)}))}catch(e){return console.error(e.message),void console.error("The data in the file does not contain a JSON object")}},a.value=""})),""!==s.value?this.addImage(s.value):a.click()),t.classList.contains(`${this.className}__image-btn-delete`)||t.classList.contains(`${this.className}__image-btn-delete-icon`)){const e=this.closest(t,`.${this.className}__image-wrapper`);this.checkCountImages(),e.remove()}}addImage(e,t=null,s=null){this.gallery.classList.add(`${this.className}--active`);const a=this.gallery.querySelector(`.${this.className}__imgs-list`),r=this.gallery.querySelector(`.${this.className}__template-image`).content.cloneNode(!0),l=r.querySelector(`.${this.className}__image-wrapper`),i=new Image(t,s);i.classList.add("e-gallery__image"),i.src=e,null!==t&&null!==s||(l.classList.add(`${this.className}__image-loading`),i.onerror=()=>{l.remove(),this.checkCountImages()},i.onload=()=>{l.classList.remove(`${this.className}__image-loading`)}),l.prepend(i),a.prepend(r)}checkCountImages(){[...this.gallery.querySelectorAll(`.${this.className}__image-wrapper`)].length<=1&&this.gallery.classList.remove(`${this.className}--active`)}closest(e,t){if(Element.prototype.closest)return e.closest(t);let s=e;for(;s;){if(s.matches(t))return s;s=s.parentElement}return null}retrieveURL=function(e){var t=document.getElementsByTagName("script");if(t&&t.length>0)for(var s in t)if(t[s].src&&t[s].src.match(new RegExp(e+"\\.js$")))return t[s].src.replace(new RegExp("(.*)"+e+"\\.js$"),"$1")}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
